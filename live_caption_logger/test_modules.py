#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script ki·ªÉm th·ª≠ c√°c module c·ªßa Live Caption Logger
"""

import sys
import os
from pathlib import Path

# Th√™m th∆∞ m·ª•c src v√†o Python path
current_dir = Path(__file__).parent
src_dir = current_dir / "src"
sys.path.insert(0, str(src_dir))

def test_screen_capture():
    """Ki·ªÉm th·ª≠ module ch·ª•p m√†n h√¨nh"""
    print("=== Ki·ªÉm th·ª≠ Screen Capture ===")
    
    try:
        from core.screen_capture import ScreenCapture
        
        capture = ScreenCapture()
        print("‚úì Kh·ªüi t·∫°o ScreenCapture th√†nh c√¥ng")
        
        # L·∫•y k√≠ch th∆∞·ªõc m√†n h√¨nh
        screen_size = capture.get_screen_size()
        print(f"‚úì K√≠ch th∆∞·ªõc m√†n h√¨nh: {screen_size}")
        
        # Ch·ª•p ·∫£nh m√†n h√¨nh
        screenshot = capture.capture_screenshot()
        if screenshot:
            print("‚úì Ch·ª•p m√†n h√¨nh th√†nh c√¥ng")
            print(f"  K√≠ch th∆∞·ªõc ·∫£nh: {screenshot.size}")
        else:
            print("‚úó Kh√¥ng th·ªÉ ch·ª•p m√†n h√¨nh")
        
        return True
        
    except Exception as e:
        print(f"‚úó L·ªói: {e}")
        return False

def test_ocr_processor():
    """Ki·ªÉm th·ª≠ module OCR"""
    print("\n=== Ki·ªÉm th·ª≠ OCR Processor ===")
    
    try:
        from core.ocr_processor import OCRProcessor
        from PIL import Image, ImageDraw, ImageFont
        
        # T·∫°o ·∫£nh test ƒë∆°n gi·∫£n
        img = Image.new('RGB', (300, 100), color='white')
        draw = ImageDraw.Draw(img)
        
        # V·∫Ω text l√™n ·∫£nh
        try:
            # Th·ª≠ s·ª≠ d·ª•ng font m·∫∑c ƒë·ªãnh
            draw.text((10, 30), "Hello World Test", fill='black')
        except:
            draw.text((10, 30), "Hello World Test", fill='black')
        
        ocr = OCRProcessor()
        print("‚úì Kh·ªüi t·∫°o OCRProcessor th√†nh c√¥ng")
        
        # Ki·ªÉm th·ª≠ OCR
        result = ocr.extract_text(img)
        print(f"‚úì OCR k·∫øt qu·∫£: '{result['text']}'")
        print(f"  ƒê·ªô tin c·∫≠y: {result['confidence']:.1f}%")
        
        # Ki·ªÉm th·ª≠ ng√¥n ng·ªØ c√≥ s·∫µn
        languages = ocr.get_available_languages()
        print(f"‚úì Ng√¥n ng·ªØ c√≥ s·∫µn: {languages[:5]}...")  # Hi·ªÉn th·ªã 5 ng√¥n ng·ªØ ƒë·∫ßu
        
        return True
        
    except Exception as e:
        print(f"‚úó L·ªói: {e}")
        return False

def test_text_processor():
    """Ki·ªÉm th·ª≠ module x·ª≠ l√Ω vƒÉn b·∫£n"""
    print("\n=== Ki·ªÉm th·ª≠ Text Processor ===")
    
    try:
        from core.text_processor import TextProcessor
        from datetime import datetime
        
        processor = TextProcessor()
        print("‚úì Kh·ªüi t·∫°o TextProcessor th√†nh c√¥ng")
        
        # T·∫°o d·ªØ li·ªáu OCR gi·∫£
        ocr_result = {
            'text': 'Hello this is a test message',
            'confidence': 85.5,
            'word_count': 6
        }
        
        # X·ª≠ l√Ω vƒÉn b·∫£n
        processed = processor.process_new_text(ocr_result)
        if processed:
            print(f"‚úì X·ª≠ l√Ω vƒÉn b·∫£n th√†nh c√¥ng: '{processed['text']}'")
            print(f"  ID: {processed['id']}")
            print(f"  Timestamp: {processed['timestamp']}")
        else:
            print("‚úó Kh√¥ng th·ªÉ x·ª≠ l√Ω vƒÉn b·∫£n")
        
        # Ki·ªÉm th·ª≠ t√≥m t·∫Øt phi√™n
        summary = processor.get_session_summary()
        print(f"‚úì T√≥m t·∫Øt phi√™n: {summary['word_count']} t·ª´")
        
        return True
        
    except Exception as e:
        print(f"‚úó L·ªói: {e}")
        return False

def test_storage_manager():
    """Ki·ªÉm th·ª≠ module l∆∞u tr·ªØ"""
    print("\n=== Ki·ªÉm th·ª≠ Storage Manager ===")
    
    try:
        from core.storage import StorageManager
        from datetime import datetime
        import tempfile
        
        # T·∫°o database t·∫°m th·ªùi
        with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp:
            db_path = tmp.name
        
        storage = StorageManager(db_path)
        print("‚úì Kh·ªüi t·∫°o StorageManager th√†nh c√¥ng")
        
        # T·∫°o phi√™n test
        session_id = storage.create_session("Test Session", {"test": True})
        print(f"‚úì T·∫°o phi√™n th√†nh c√¥ng, ID: {session_id}")
        
        # L∆∞u transcript entry
        text_data = {
            'id': 'test123',
            'text': 'This is a test transcript',
            'timestamp': datetime.now(),
            'confidence': 90.0,
            'is_incremental': False
        }
        
        storage.save_transcript_entry(session_id, text_data)
        print("‚úì L∆∞u transcript entry th√†nh c√¥ng")
        
        # L·∫•y transcript
        transcript = storage.get_session_transcript(session_id)
        print(f"‚úì L·∫•y transcript th√†nh c√¥ng: {len(transcript)} entries")
        
        # K·∫øt th√∫c phi√™n
        storage.end_session(session_id)
        print("‚úì K·∫øt th√∫c phi√™n th√†nh c√¥ng")
        
        # L·∫•y danh s√°ch phi√™n
        sessions = storage.get_sessions()
        print(f"‚úì L·∫•y danh s√°ch phi√™n: {len(sessions)} phi√™n")
        
        # D·ªçn d·∫πp
        os.unlink(db_path)
        
        return True
        
    except Exception as e:
        print(f"‚úó L·ªói: {e}")
        return False

def test_integration():
    """Ki·ªÉm th·ª≠ t√≠ch h·ª£p c√°c module"""
    print("\n=== Ki·ªÉm th·ª≠ t√≠ch h·ª£p ===")
    
    try:
        from core.screen_capture import ScreenCapture
        from core.ocr_processor import OCRProcessor
        from core.text_processor import TextProcessor
        from core.storage import StorageManager
        from PIL import Image, ImageDraw
        import tempfile
        import time
        
        # Kh·ªüi t·∫°o c√°c module
        capture = ScreenCapture()
        ocr = OCRProcessor()
        text_processor = TextProcessor()
        
        with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp:
            db_path = tmp.name
        storage = StorageManager(db_path)
        
        print("‚úì Kh·ªüi t·∫°o t·∫•t c·∫£ module th√†nh c√¥ng")
        
        # T·∫°o phi√™n
        session_id = storage.create_session("Integration Test")
        
        # T·∫°o ·∫£nh test v·ªõi vƒÉn b·∫£n
        img = Image.new('RGB', (400, 100), color='white')
        draw = ImageDraw.Draw(img)
        draw.text((10, 30), "Integration test message", fill='black')
        
        # Quy tr√¨nh x·ª≠ l√Ω ho√†n ch·ªânh
        ocr_result = ocr.extract_text(img)
        processed_text = text_processor.process_new_text(ocr_result)
        
        if processed_text:
            storage.save_transcript_entry(session_id, processed_text)
            print("‚úì Quy tr√¨nh t√≠ch h·ª£p th√†nh c√¥ng")
            
            # Xu·∫•t file test
            with tempfile.NamedTemporaryFile(suffix='.txt', delete=False) as tmp:
                export_path = tmp.name
            
            success = storage.export_session_to_text(session_id, export_path)
            if success:
                print("‚úì Xu·∫•t file th√†nh c√¥ng")
                with open(export_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    print(f"  N·ªôi dung file: {len(content)} k√Ω t·ª±")
                os.unlink(export_path)
            else:
                print("‚úó Kh√¥ng th·ªÉ xu·∫•t file")
        else:
            print("‚úó Kh√¥ng th·ªÉ x·ª≠ l√Ω vƒÉn b·∫£n")
        
        # D·ªçn d·∫πp
        storage.end_session(session_id)
        os.unlink(db_path)
        
        return True
        
    except Exception as e:
        print(f"‚úó L·ªói t√≠ch h·ª£p: {e}")
        return False

def main():
    """Ch·∫°y t·∫•t c·∫£ c√°c test"""
    print("B·∫Øt ƒë·∫ßu ki·ªÉm th·ª≠ Live Caption Logger")
    print("=" * 50)
    
    tests = [
        test_screen_capture,
        test_ocr_processor,
        test_text_processor,
        test_storage_manager,
        test_integration
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
    
    print("\n" + "=" * 50)
    print(f"K·∫øt qu·∫£: {passed}/{total} test th√†nh c√¥ng")
    
    if passed == total:
        print("üéâ T·∫•t c·∫£ test ƒë·ªÅu PASS!")
        return True
    else:
        print("‚ö†Ô∏è  M·ªôt s·ªë test FAIL!")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

